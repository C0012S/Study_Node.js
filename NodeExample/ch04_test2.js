// 이벤트 처리 // 이벤트 처리를 하는 가장 대표적인 게 프로세스라고 하는 객체 // 프로세스는 전역 객체 중 하나다. console과 process가 전역 객체 중 가장 대표적인 것이었다. 그래서 어디서든 사용할 수 있다.
process.on('exit', function() { // process에 on이라는 메소드가 있다. // 이벤트를 받기 위한 메소드다. // process는 EventEmitter를 이미 상속하고 있다. 그래서 이벤트를 받아서 처리할 수 있는 것이다. // 그러면 이벤트를 누군가 보냈다면, 이걸 어떻게 받는가? → 어떤 이벤트인지 구분하는 구분자를 넣어 준다.
    console.log('exit 이벤트 발생함.');
}); // 익명 함수가 exit이라는 이벤트가 발생했을 때 자동으로 호출된다.
// process 객체에 정의된 on 메소드를 이용해서 exit 이벤트를 처리할 방법을 마련해 놓은 것이다.

// exit 이벤트 발생 // exit 이벤트는 프로세스에다가 exit이라고 해서, 이 프로그램을 종료하는 순간 이벤트가 발생한다.
setTimeout(function() { // 바로 발생하면 구분하기 힘드니까 setTimeout을 이용 // 일정 시간 후에 함수를 실행
    console.log('2초 후에 실행되었음.');
    
    process.exit();
}, 2000); // 2 초 후에 앞에 있는 함수 실행

console.log('2초 후에 실행될 것임.');

// 실행되는 순서 잘 보기 // process on은, 이 코드가 실행되더라도 출력되는 것을 볼 수 없다. 뒤에 있는 함수를 등록해 놓기만 하기 때문이다. // 지금 실행되는 것이 아니라 exit 이벤트가 발생했을 때 실행된다.
// setTimeout이라는 것도, 결국엔 2 초 후에 이 함수가 실행된다. 이것도 바로 실행되는 게 아니다.
// 결국에는 console.log('2초 후에 실행될 것임.'); 코드가 먼저 실행돼서 출력된다.
// 2 초 후에 console.log('2초 후에 실행되었음.');이 실행된다.
// 그 다음에 exit을 하게 되면, 이 exit 이벤트가 전달돼서 console.log('exit 이벤트 발생함.');이 실행될 것이다.

// 이것을 이벤트라고 한다.
// 실제로는, process.exit();을 했을 때, 내부적으로 emit이라는 것을 보내는 과정이 발생한다.
// 그것을 좀 더 명확하게 보기 위해서, 추가로 한 번 더 테스트를 해 본다.
