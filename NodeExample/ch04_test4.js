// 여기에서 직접 모든 기능을 다 하는 게 아니라, 계산기 객체는 따로 만든다. // 그러면 모듈이 따로 분리되어 있으므로, 다른 모듈에서 필요한 정보를 이 파일(이 모듈)로 전달하고 싶다. 메인 쪽으로 전달하고 싶다고 하는 경우에는 어떻게 할 것인가?
var Calc = require('./calc3'); // 만든 모듈을 불러온다. // 모듈에서 module.exports에 Calc라는 객체를 그대로 할당했으므로 그게 그대로 return 되었다.

// 프로토타입이라는 것을 그대로 가져온 것이므로 실제 계산기 틀인 것이다. // 실제 계산기를 만들려면 new Calc();로 만들게 된다. // 프로토타입 객체 → 3 장이나 자바스크립트 기본서
var calc1 = new Calc(); // 계산기 틀을 가지고 calc1이라는 실제 계산기로 만든다.
calc1.emit('stop'); // EventEmitter를 프로토타입이 상속했기 때문에 emit 메소드를 호출할 수 있다. // stop이라는 이벤트를 전달 // → 어디로 전달되는가? calc3.js에서 프로토타입 객체를 정의할 때, 계산기 틀을 정의할 때 on으로 받고 있다. // 저 쪽으로 이벤트가 전달되게 된다.

console.log('Calc에 stop 이벤트 전달함.'); // 실행하자마자 이 문구가 출력될 것이다. // 전달받으면, calc3.js의 모듈 안에 있는 글자가 출력된다.
// 처음에 '전달함'이 먼저 전달되었는데, 너무 빨리 전달되어서 '전달됨'이 먼저 출력되었다.

// 여기까지 이벤트를 같이 했다. // 프로토타입 객체가 사용되었고, 콜백 함수는 자주 사용된다.
// 이벤트는 emit으로 보내고 on으로 받는다. // 우리가 만든 모듈에서도 사용할 수 있다.
