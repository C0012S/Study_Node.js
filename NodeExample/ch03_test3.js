// 함수 정의 - 함수는 함수 상자를 생각하면 된다. // 더하기 함수 상자를 생각해 본다. // 이름 add / 위의 구멍 a, b
function add(a, b) {
    return a + b;  // return이라는 키워드를 사용하면, 함수 상자의 아래 쪽 구멍으로 빠진다고 생각할 수 있다.
}
// 일급 객체로 다루기 때문에 이 add라는 함수를 변수에 할당할 수 있다.

var result = add(10, 10); // 함수 상자 바깥에서 보면 실행하는 것이다.
console.log('더하기 결과 : ' + result);

// add2로 이름이 하나 정해졌기 때문에, 변수에 할당하면서 변수 이름이 정해졌다. -> 함수의 이름(add)을 없앤다. 이를 익명 함수라고 한다.
var add2 = function (a, b) {
    return a + b;
}

var result2 = add2(10, 10); // add2 : 변수 이름이다. 함수를 할당 받았기 때문에 함수로 동작할 수 있다.
console.log('더하기 결과2 : ' + result2);
// 함수를 변수에 할당할 수 있다.
// 일급 객체라서 함수를 변수에 할당할 수 있기 때문에, 나중에 보면 함수 상자에 전달하는 값을, 위의 구멍으로 전달하는 값을 함수로 전달할 수 있다. - Why? 함수를 변수에 할당될 수 있으니까.  // 함수에서 return 하는 값도 함수를 return 할 수 있다. 함수 안에서 다른 함수를 만들어서 return 할 수 있다. -> 그러면서 코드 자체가 굉장히 복잡해진다. 코드가 복잡해지지만, 익숙해지면 얻을 수 있는 장점도 굉장히 많아진다. 그래서 이런 형태로 구성하게 된다.
