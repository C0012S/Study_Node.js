// http 모듈을 이용해서 웹 서버 만들기
var http = require('http'); // http는 기본적으로 서버 기능을 담당하기 위한 것이다. // http므로 웹 서버일 것이다. // 서버를 객체로 만들 수 있게 http 모듈이 제공해 준다.

var server = http.createServer(); // 웹 서버 객체가 return이 된다. // return된 것을 server 변수에 할당한다.

// 서버는 클라이언트 요청을 대기하고 있다가, 그 요청을 받아서 필요한 응답을 해 주는 것이다.
var port = 3000;
server.listen(port, function() { // 이 콜백 함수는 웹 서버가 정상적으로 실행되었을 때 호출된다.
    console.log('웹 서버가 실행되었습니다.' + port); // 로그가 찍히는 순간 웹 서버가 딱 실행되는 상태가 된다.
}); // 대기하고 있기 위해서 listen 메소드가 제공된다. // listen 메소드를 호출하게 되면, 대기를 하게 되는데, 네트워킹 즉, 클라이언트 서버에서 데이터를 주고받을 때는 포트라는 걸 사용한다. 60000 개가 넘는 포트 중에서 하나로만 통신하는 것이다. // 포트 번호를 첫 번째 파라미터로 넣어 준다. // 첫 번째 파라미터로 포트 번호를 넣어 준다. // port 3000 번에서 대기한다. // 두 번째 파라미터로 콜백 함수가 전달된다.
// 실행 후 결과 → 이것은 실제 동작하는 웹 서버다. 그러다 보니까, 이 웹 서버를 접속할 수가 있다.
// 에러 : EADDRINUSE - 포트라는 것은 다른 게 점유하고 있으면 그것을 다른 게 같이 사용할 수가 없다. 아까 3000 번으로 서버가 실행됐는데, 이 웹 서버라고 하는 것은 계속 대기하고 있기 때문에 명시적으로 중단시키지 않으면 중지되지 않는다. 그러다 보니까 이런 식으로 에러 메시지가 뜬 것이다. 뒤에 아직 실행이 되고 있는데, 얘가 실행을 한 것이다. 그래서 이런 메시지가 떴다고 생각하면 된다.  // 그러면 기존에 실행했던 거를 중단시켜야 된다.
// 기존의 프로세스를 가서 한 번 본다.
// 작업 관리자로 Node.js 관련 프로세스 삭제 후 다시 실행 // → 실제로 지금 뒤에서 실행된 프로세스가 있다는 것이다. 뒤에서 실행된 프로세스를 종료시켜야, 중단 버튼을 누르면 종료가 된 것이다. 그 다음에 다시 실행하면, 에러가 되지 않는다.
// 포트가 다른 프로세스가 이미 사용하고 있으면, 아까 같은 에러가 생긴다는 것을 꼭 기억하기.
// 서버가 한 번 실행이 되면 계속 실행되어 있다.

// http://localhost:3000/이라고 하면, 이 웹 서버를 접속하게 되는 것이다.
// 물론 아무런 반응이 없다. 왜냐하면 응답을 보내도록 한 것이 없다.
// 단순히 클라이언트 요청을 받아 주도록만 한 것이다. 그래서 이 웹 브라우저를 열고, local host가 누구인가? 나 자신을 가리킨다. 그래서 내 PC에 3000 번 포트를 실행했으니까 3000 번 포트로 접속하라는 것이다, 웹 브라우저에. 응답이 있으면, 보여 줄 텐데 응답이 아직 없는 것이다. 그렇다고 하더라도 웹 서버라고 하는 게 간단히 몇 줄만으로도 만들어진다는 것을 잘 이해할 수가 있을 것이다.
