process.on('tick', function(count) { // exit이라는 건 미리 node.js 안에서 정의된 것이다. // 그게 아니라 우리가 이벤트를 정의하고 싶다면? → tick이라고 하는 이벤트를 정의 // 그 이벤트가 전달되면, 익명 함수를 하나 만들어서 그 익명 함수를 실행한다.
    console.log('tick 이벤트 발생함 : ' + count);
});

setTimeout(function() {
    console.log('2초 후에 실행되었음.');
    
    process.emit('tick', '2'); // 이벤트를 전달할 것이다. // process는 EventEmitter를 이미 상속하고 있기 때문에 emit이라고 하는 메소드를 호출할 수 있다. // tick이라는 이벤트를 발생시킨다. 그리고 2를 문자열로 전달한다.
}, 2000); // setTimeout : 일정 시간 후에 실행 // 2 초 후, 첫 번째 파라미터 function을 실행

// 처음에 이벤트라고 하는 게, emit으로 보내고 on으로 받는다는 것에 충실한 가장 전형적인 코드 구성이다.
// 콜백 함수를 명확하게 이해해야 한다. // 콜백 함수는 아주 광범위하게 쓰인다. 그래서 이 콜백 함수가 어떤 과정을 거쳐서 만들어졌고, 그 다음에 어떻게 쓰인다는 것을 3 장에서 한 번 봤다. 그거를 잘 이해하고 있는 게 굉장히 중요하다.
// process 객체에 대해 써보지 않는 방향으로 하면? → 계산기라는 기능을 하나 만드는데, 그 계산기라는 기능을 위해서 직접 EventEmitter를 상속해서 만들어 본다.
