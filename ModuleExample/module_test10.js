// 프로토타입 객체를 할당하는 코드 패턴
var User = require('./user10'); // 프로토타입

var user = new User('test01', '소녀시대'); // 프로토타입이므로 new User로 객체를 만들 수 있다.

user.printUser();

// 이것도 이 안에 이렇게 만들어진 코드가 가능하다. 모듈을 불러들인 다음에 new로 객체를 만들 수가 있다는 걸 생각하면 된다. // 이게 왜 가능한지 이해하는 게 중요하다.
// 이것도 exports를 쓰면, 속성으로 프로토타입을 할당해서 쓸 수가 있다. // 이게 그 다음 예제에 나와 있는 내용이다.

// 이렇게 대표적인 모듈을 만드는 방식에 대해서 봤다.
// 함수를 모듈에서 return 하는 경우에는 소괄호만 붙이면 바로 함수가 실행된다. 그게 어떤 코드 형태를 만들어 내는지, 그 다음에 프로토타입 또는 프로토타입에서 만들어 낸 인스턴스 객체를 return 했을 경우에 어떤 코드 패턴이 만들어지는지를 잘 보면 좋을 것 같다. // 그리고 여러 번 입력하면서 이해하고, 여러 번 입력하면서 익숙하게 만드는 게 필요하다. // 이게 지금까지 본 이 과정이 익숙해져야 그 다음에 우리가 만든, DatabaseExample에서 만든 코드를 하나씩 하나씩 분리할 수 있을 것이다. 그리고 이 책에서 모듈로 분리시켜 놓은 게 정답은 아니다. 무슨 얘기냐면, 모듈을 어떻게 분리시킬 건지는 정해져 있는 게 아니다. 여러분이 가장 잘 구조화할 수 있게, 잘 분리해서 또 재활용하거나, 또는 가장 잘 구분하면서 쓸 수 있게 만들어 놓는 게 중요하고, 그러다 보니까 모듈이라는 걸 어떻게 만들 수 있다에 대해서 잘 익숙하게 만들어 주면 형태를 막 바꿔서 만들어 볼 수가 있겠다. 어쨌든 지금까지 한 과정 여러 번 반복해서 익숙하게 만든 다음에, 그 다음에 모듈화를 직접 해 보는 과정을 진행해 볼 것이다.
// 조금 이따가 사용자 정보 관련 기능을 모듈화하기로 넘어가도록 한다.
